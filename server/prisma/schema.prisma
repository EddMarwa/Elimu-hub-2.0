// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  role      UserRole @default(TEACHER)
  school    String?
  county    String?
  subjects  String?  // JSON string array
  password  String   // hashed password
  status    UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  schemesOfWork   SchemeOfWork[]
  schemeOfWorkFiles SchemeOfWorkFile[]
  schemeTemplates SchemeTemplate[]
  documents       Document[]
  libraryFiles    LibraryFile[]
  auditLogs       AuditLog[]
  lessonPlans     LessonPlan[]
  comments        Comment[]

  @@map("users")
}

model Document {
  id               String            @id @default(cuid())
  title            String
  subject          String
  grade            String
  documentType     DocumentType
  fileName         String
  filePath         String
  extractedContent String?
  processingStatus ProcessingStatus @default(PENDING)
  uploadedBy       String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  user   User              @relation(fields: [uploadedBy], references: [id])
  chunks DocumentChunk[]

  @@map("documents")
}

model DocumentChunk {
  id         String   @id @default(cuid())
  documentId String
  content    String
  metadata   String   // JSON string
  chunkIndex Int
  createdAt  DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_chunks")
}



model SchemeOfWork {
  id                String   @id @default(cuid())
  title             String
  subject           String
  grade             String
  term              String
  strand            String
  subStrand         String?
  duration          String
  weeks             Int
  generalObjectives String   // JSON string array
  weeklyPlans       String   // JSON string array of weekly plan objects
  resources         String?  // JSON string array
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [createdBy], references: [id])

  @@map("schemes_of_work")
}

model SchemeOfWorkFile {
  id           String   @id @default(cuid())
  title        String
  description  String?
  subject      String
  grade        String
  term         String
  strand       String?
  subStrand    String?
  fileName     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  downloads    Int      @default(0)
  isPublic     Boolean  @default(true)
  uploadedBy   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [uploadedBy], references: [id])

  @@map("scheme_of_work_files")
}

model SchemeTemplate {
  id            String   @id @default(cuid())
  filename      String
  originalName  String
  filePath      String
  mimeType      String
  fileSize      Int
  extractedText String?  // Processed content from the template
  subject       String?
  grade         String?
  uploadedBy    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [uploadedBy], references: [id])

  @@map("scheme_templates")
}

model Template {
  id          String       @id @default(cuid())
  name        String
  type        TemplateType
  subject     String?
  grade       String?
  content     String       // JSON template structure
  isDefault   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("templates")
}

model LessonPlan {
  id          String   @id @default(uuid())
  title       String
  description String
  grade       String
  subject     String
  tags        String   // JSON string for storing tags array
  fileUrl     String
  fileType    String
  uploadedBy  String
  folderId    String?
  downloads   Int      @default(0)
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [uploadedBy], references: [id])
  folder  Folder?  @relation(fields: [folderId], references: [id])
  comments Comment[]

  @@map("lesson_plans")
}

model Folder {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      Folder?    @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[]   @relation("FolderHierarchy")
  lessonPlans LessonPlan[]

  @@map("folders")
}

model Comment {
  id           String   @id @default(cuid())
  content      String
  rating       Int      @default(0)
  userId       String
  lessonPlanId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id])
  lessonPlan LessonPlan @relation(fields: [lessonPlanId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Enums
enum UserRole {
  TEACHER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum DocumentType {
  CURRICULUM_DESIGN
  TEACHERS_GUIDE
  LEARNERS_BOOK
  ASSESSMENT_RUBRIC
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum TemplateType {
  SCHEME_OF_WORK
  ASSESSMENT
}

enum LibraryFileStatus {
  PENDING
  APPROVED
  DECLINED
}

enum LibraryFileType {
  PDF
  VIDEO
  AUDIO
  IMAGE
  DOCUMENT
}

enum AuditAction {
  CREATE_USER
  UPDATE_USER
  DELETE_USER
  UPLOAD_FILE
  APPROVE_FILE
  DECLINE_FILE
  DELETE_FILE
  CREATE_SECTION
  CREATE_SUBFOLDER
}

// Library System Models
model LibrarySection {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subfolders LibrarySubfolder[]
  files      LibraryFile[]

  @@map("library_sections")
}

model LibrarySubfolder {
  id        String   @id @default(cuid())
  name      String
  sectionId String
  metadata  String?  // JSON for flexible data (e.g., grade, subject, year)
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  section LibrarySection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  files   LibraryFile[]

  @@unique([sectionId, name])
  @@map("library_subfolders")
}

model LibraryFile {
  id           String            @id @default(cuid())
  filename     String
  originalName String
  filePath     String
  fileType     LibraryFileType
  fileSize     Int
  mimeType     String
  status       LibraryFileStatus @default(PENDING)
  sectionId    String
  subfolderId  String?
  uploadedBy   String
  approvedBy   String?
  metadata     String?           // JSON for additional file info
  description  String?
  tags         String?           // JSON array of tags
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  section    LibrarySection     @relation(fields: [sectionId], references: [id])
  subfolder  LibrarySubfolder?  @relation(fields: [subfolderId], references: [id])
  uploader   User               @relation(fields: [uploadedBy], references: [id])

  @@map("library_files")
}

model AuditLog {
  id          String      @id @default(cuid())
  action      AuditAction
  entityType  String      // Type of entity (User, LibraryFile, etc.)
  entityId    String      // ID of the entity
  userId      String      // User who performed the action
  details     String?     // JSON with additional details
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
